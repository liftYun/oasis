/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace NomadBooking {
  export type PolicySnapStruct = {
    before1: BigNumberish;
    before2: BigNumberish;
    before3: BigNumberish;
    before4: BigNumberish;
    amtPct1: BigNumberish;
    amtPct2: BigNumberish;
    amtPct3: BigNumberish;
    amtPct4: BigNumberish;
    amtPct5: BigNumberish;
    feePct1: BigNumberish;
    feePct2: BigNumberish;
    feePct3: BigNumberish;
    feePct4: BigNumberish;
    feePct5: BigNumberish;
  };

  export type PolicySnapStructOutput = [
    before1: bigint,
    before2: bigint,
    before3: bigint,
    before4: bigint,
    amtPct1: bigint,
    amtPct2: bigint,
    amtPct3: bigint,
    amtPct4: bigint,
    amtPct5: bigint,
    feePct1: bigint,
    feePct2: bigint,
    feePct3: bigint,
    feePct4: bigint,
    feePct5: bigint
  ] & {
    before1: bigint;
    before2: bigint;
    before3: bigint;
    before4: bigint;
    amtPct1: bigint;
    amtPct2: bigint;
    amtPct3: bigint;
    amtPct4: bigint;
    amtPct5: bigint;
    feePct1: bigint;
    feePct2: bigint;
    feePct3: bigint;
    feePct4: bigint;
    feePct5: bigint;
  };

  export type BookingStruct = {
    guest: AddressLike;
    host: AddressLike;
    amount: BigNumberish;
    fee: BigNumberish;
    checkIn: BigNumberish;
    checkOut: BigNumberish;
    status: BigNumberish;
    policy: NomadBooking.PolicySnapStruct;
  };

  export type BookingStructOutput = [
    guest: string,
    host: string,
    amount: bigint,
    fee: bigint,
    checkIn: bigint,
    checkOut: bigint,
    status: bigint,
    policy: NomadBooking.PolicySnapStructOutput
  ] & {
    guest: string;
    host: string;
    amount: bigint;
    fee: bigint;
    checkIn: bigint;
    checkOut: bigint;
    status: bigint;
    policy: NomadBooking.PolicySnapStructOutput;
  };
}

export interface NomadBookingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "USDC"
      | "activeBookings"
      | "admin"
      | "bookings"
      | "canRelease"
      | "cancelWithPolicy"
      | "checkPermitSupport"
      | "checkUpkeep"
      | "emergencyWithdraw"
      | "feeRecipient"
      | "getBooking"
      | "getDomainSeparator"
      | "getGuestBookingIds"
      | "getHostBookingIds"
      | "getNonce"
      | "getPermitTypeHash"
      | "getUSDCAddress"
      | "graceSeconds"
      | "guestBookingCount"
      | "hostBookingCount"
      | "lock"
      | "nonces"
      | "pause"
      | "paused"
      | "performUpkeep"
      | "refundEarly"
      | "release"
      | "supportsInterface"
      | "supportsPermit"
      | "unpause"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BookingLocked"
      | "CanceledWithPolicy"
      | "Paused"
      | "Refunded"
      | "Released"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(functionFragment: "USDC", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "activeBookings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(functionFragment: "bookings", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "canRelease",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelWithPolicy",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkPermitSupport",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkUpkeep",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBooking",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDomainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGuestBookingIds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getHostBookingIds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNonce",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPermitTypeHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUSDCAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "graceSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "guestBookingCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hostBookingCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lock",
    values: [
      BytesLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      NomadBooking.PolicySnapStruct
    ]
  ): string;
  encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "performUpkeep",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "refundEarly",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "release", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsPermit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(functionFragment: "USDC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "activeBookings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bookings", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canRelease", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelWithPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkPermitSupport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBooking", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDomainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGuestBookingIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHostBookingIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPermitTypeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUSDCAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "graceSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "guestBookingCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hostBookingCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "performUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refundEarly",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
}

export namespace BookingLockedEvent {
  export type InputTuple = [
    resId: BytesLike,
    guest: AddressLike,
    host: AddressLike,
    amount: BigNumberish,
    fee: BigNumberish
  ];
  export type OutputTuple = [
    resId: string,
    guest: string,
    host: string,
    amount: bigint,
    fee: bigint
  ];
  export interface OutputObject {
    resId: string;
    guest: string;
    host: string;
    amount: bigint;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CanceledWithPolicyEvent {
  export type InputTuple = [
    resId: BytesLike,
    tier: BigNumberish,
    refundToGuestAmt: BigNumberish,
    payToHostAmt: BigNumberish,
    refundToGuestFee: BigNumberish,
    payToTreasuryFee: BigNumberish
  ];
  export type OutputTuple = [
    resId: string,
    tier: bigint,
    refundToGuestAmt: bigint,
    payToHostAmt: bigint,
    refundToGuestFee: bigint,
    payToTreasuryFee: bigint
  ];
  export interface OutputObject {
    resId: string;
    tier: bigint;
    refundToGuestAmt: bigint;
    payToHostAmt: bigint;
    refundToGuestFee: bigint;
    payToTreasuryFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RefundedEvent {
  export type InputTuple = [
    resId: BytesLike,
    toGuest: AddressLike,
    total: BigNumberish
  ];
  export type OutputTuple = [resId: string, toGuest: string, total: bigint];
  export interface OutputObject {
    resId: string;
    toGuest: string;
    total: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReleasedEvent {
  export type InputTuple = [
    resId: BytesLike,
    toHost: AddressLike,
    amount: BigNumberish,
    feeTo: AddressLike,
    fee: BigNumberish
  ];
  export type OutputTuple = [
    resId: string,
    toHost: string,
    amount: bigint,
    feeTo: string,
    fee: bigint
  ];
  export interface OutputObject {
    resId: string;
    toHost: string;
    amount: bigint;
    feeTo: string;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface NomadBooking extends BaseContract {
  connect(runner?: ContractRunner | null): NomadBooking;
  waitForDeployment(): Promise<this>;

  interface: NomadBookingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  USDC: TypedContractMethod<[], [string], "view">;

  activeBookings: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  admin: TypedContractMethod<[], [string], "view">;

  bookings: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        NomadBooking.PolicySnapStructOutput
      ] & {
        guest: string;
        host: string;
        amount: bigint;
        fee: bigint;
        checkIn: bigint;
        checkOut: bigint;
        status: bigint;
        policy: NomadBooking.PolicySnapStructOutput;
      }
    ],
    "view"
  >;

  canRelease: TypedContractMethod<[resId: BytesLike], [boolean], "view">;

  cancelWithPolicy: TypedContractMethod<
    [resId: BytesLike],
    [void],
    "nonpayable"
  >;

  checkPermitSupport: TypedContractMethod<[], [boolean], "view">;

  checkUpkeep: TypedContractMethod<
    [arg0: BytesLike],
    [[boolean, string] & { upkeepNeeded: boolean; performData: string }],
    "view"
  >;

  emergencyWithdraw: TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  feeRecipient: TypedContractMethod<[], [string], "view">;

  getBooking: TypedContractMethod<
    [resId: BytesLike],
    [NomadBooking.BookingStructOutput],
    "view"
  >;

  getDomainSeparator: TypedContractMethod<[], [string], "view">;

  getGuestBookingIds: TypedContractMethod<
    [guest: AddressLike],
    [string[]],
    "view"
  >;

  getHostBookingIds: TypedContractMethod<
    [host: AddressLike],
    [string[]],
    "view"
  >;

  getNonce: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getPermitTypeHash: TypedContractMethod<[], [string], "view">;

  getUSDCAddress: TypedContractMethod<[], [string], "view">;

  graceSeconds: TypedContractMethod<[], [bigint], "view">;

  guestBookingCount: TypedContractMethod<
    [guest: AddressLike],
    [bigint],
    "view"
  >;

  hostBookingCount: TypedContractMethod<[host: AddressLike], [bigint], "view">;

  lock: TypedContractMethod<
    [
      resId: BytesLike,
      host: AddressLike,
      amount: BigNumberish,
      fee: BigNumberish,
      checkIn: BigNumberish,
      checkOut: BigNumberish,
      policy: NomadBooking.PolicySnapStruct
    ],
    [void],
    "nonpayable"
  >;

  nonces: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  performUpkeep: TypedContractMethod<
    [performData: BytesLike],
    [void],
    "nonpayable"
  >;

  refundEarly: TypedContractMethod<[resId: BytesLike], [void], "nonpayable">;

  release: TypedContractMethod<[resId: BytesLike], [void], "nonpayable">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  supportsPermit: TypedContractMethod<[], [boolean], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "USDC"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "activeBookings"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "bookings"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        NomadBooking.PolicySnapStructOutput
      ] & {
        guest: string;
        host: string;
        amount: bigint;
        fee: bigint;
        checkIn: bigint;
        checkOut: bigint;
        status: bigint;
        policy: NomadBooking.PolicySnapStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "canRelease"
  ): TypedContractMethod<[resId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "cancelWithPolicy"
  ): TypedContractMethod<[resId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "checkPermitSupport"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "checkUpkeep"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [[boolean, string] & { upkeepNeeded: boolean; performData: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "feeRecipient"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getBooking"
  ): TypedContractMethod<
    [resId: BytesLike],
    [NomadBooking.BookingStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDomainSeparator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getGuestBookingIds"
  ): TypedContractMethod<[guest: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getHostBookingIds"
  ): TypedContractMethod<[host: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getNonce"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPermitTypeHash"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getUSDCAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "graceSeconds"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "guestBookingCount"
  ): TypedContractMethod<[guest: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "hostBookingCount"
  ): TypedContractMethod<[host: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "lock"
  ): TypedContractMethod<
    [
      resId: BytesLike,
      host: AddressLike,
      amount: BigNumberish,
      fee: BigNumberish,
      checkIn: BigNumberish,
      checkOut: BigNumberish,
      policy: NomadBooking.PolicySnapStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "performUpkeep"
  ): TypedContractMethod<[performData: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "refundEarly"
  ): TypedContractMethod<[resId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "release"
  ): TypedContractMethod<[resId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "supportsPermit"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "BookingLocked"
  ): TypedContractEvent<
    BookingLockedEvent.InputTuple,
    BookingLockedEvent.OutputTuple,
    BookingLockedEvent.OutputObject
  >;
  getEvent(
    key: "CanceledWithPolicy"
  ): TypedContractEvent<
    CanceledWithPolicyEvent.InputTuple,
    CanceledWithPolicyEvent.OutputTuple,
    CanceledWithPolicyEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Refunded"
  ): TypedContractEvent<
    RefundedEvent.InputTuple,
    RefundedEvent.OutputTuple,
    RefundedEvent.OutputObject
  >;
  getEvent(
    key: "Released"
  ): TypedContractEvent<
    ReleasedEvent.InputTuple,
    ReleasedEvent.OutputTuple,
    ReleasedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "BookingLocked(bytes32,address,address,uint256,uint256)": TypedContractEvent<
      BookingLockedEvent.InputTuple,
      BookingLockedEvent.OutputTuple,
      BookingLockedEvent.OutputObject
    >;
    BookingLocked: TypedContractEvent<
      BookingLockedEvent.InputTuple,
      BookingLockedEvent.OutputTuple,
      BookingLockedEvent.OutputObject
    >;

    "CanceledWithPolicy(bytes32,uint8,uint256,uint256,uint256,uint256)": TypedContractEvent<
      CanceledWithPolicyEvent.InputTuple,
      CanceledWithPolicyEvent.OutputTuple,
      CanceledWithPolicyEvent.OutputObject
    >;
    CanceledWithPolicy: TypedContractEvent<
      CanceledWithPolicyEvent.InputTuple,
      CanceledWithPolicyEvent.OutputTuple,
      CanceledWithPolicyEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Refunded(bytes32,address,uint256)": TypedContractEvent<
      RefundedEvent.InputTuple,
      RefundedEvent.OutputTuple,
      RefundedEvent.OutputObject
    >;
    Refunded: TypedContractEvent<
      RefundedEvent.InputTuple,
      RefundedEvent.OutputTuple,
      RefundedEvent.OutputObject
    >;

    "Released(bytes32,address,uint256,address,uint256)": TypedContractEvent<
      ReleasedEvent.InputTuple,
      ReleasedEvent.OutputTuple,
      ReleasedEvent.OutputObject
    >;
    Released: TypedContractEvent<
      ReleasedEvent.InputTuple,
      ReleasedEvent.OutputTuple,
      ReleasedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
